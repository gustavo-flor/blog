{
  "56-scalability-and-elasticity": {
    "title": "🪀 Escalabilidade e Elasticidade",
    "description": "Vamos falar sobre escalabilidade e elasticidade — conceitos relacionados, porém distintos, que muitas vezes são utilizados de forma incorreta como sinônimos...."
  },
  "55-what-is-load-test": {
    "title": "🚚 O que é teste de carga?",
    "description": "Simulando diferentes cargas de uso em um sistema, os testes de carga nos ajudam a identificar possíveis gargalos antes mesmo que eles ocorram em produção..."
  },
  "54-what-is-webhook": {
    "title": "📟 O que é webhook?",
    "description": "Webhook é uma forma de comunicação entre sistemas através de callbacks..."
  },
  "53-idempotent-api": {
    "title": "🧦 Idempotência em sua API",
    "description": "Idempotência é um termo utilizado na computação para definir operações que, de acordo com o input inicial, são executadas múltiplas vezes sem alterar seu resultado final. Entenda..."
  },
  "52-backpressure": {
    "title": "🦀 Gerenciamento de fluxo e recursos com backpressure",
    "description": "Backpressure é uma técnica para garantir o funcionamento correto de um software ao processar um fluxo de dados. Ela permite que a aplicação gerencie..."
  },
  "51-kotlin-introduction": {
    "title": "🧚‍♀️ Kotlin: Vantagens, mitos, dicas e conceitos fundamentais",
    "description": "Vamos falar sobre Kotlin! Neste texto, quero compartilhar algumas coisas que aprendi nas últimas semanas, desvendar alguns mitos sobre a linguagem e fornecer exemplos práticos para quem está começando..."
  },
  "50-circuit-breaker": {
    "title": "🎒 Como utilizar Circuit Breaker para tornar seu serviço mais resiliente",
    "description": "O padrão Circuit Breaker, na arquitetura de microsserviços, possibilita que uma aplicação consiga se manter de pé, evitando falhas em cascata, ao enfretar problemas de comunicação com chamadas remotas..."
  },
  "49-sdkman": {
    "title": "🧑‍💼 SDKMan: Ferramenta para gerenciamento de SDKs",
    "description": "Vamos falar sobre o SDKMan, o que é a essa ferramenta e suas vantagem de utilizar. SDKMan é um gerenciador de SDKs..."
  },
  "48-spring-and-openapi": {
    "title": "📝 Spring: Documentando sua API HTTP com OpenAPI",
    "description": "O OpenAPI, também conhecido como Swagger, é uma forma de especificar e documentar sua API HTTP. É uma forma padronizada e agnóstica à linguagem que permite expor os padrões e comportamentos de um serviço..."
  },
  "47-spring-mail": {
    "title": "📮 Envio de e-mails com Spring Mail",
    "description": "O envio de e-mails é um aspecto crucial para diversas aplicações, sendo utilizado para enviar notificações, alertas ou comunicações para os usuários."
  },
  "46-concurrency-and-parallelism": {
    "title": "🏎️ Concorrência e Paralelismo",
    "description": "Concorrência e paralelismo são conceitos relacionados na computação, frequentemente utilizados como sinônimos. No entanto, eles têm significados diferentes. Entender essa diferença pode ser crucial no design eficiente de um software."
  },
  "45-acid-transactions": {
    "title": "🕯️ O que são transações ACID?",
    "description": "Em um sistema de banco de dados, uma transação representa uma unidade de trabalho (operação lógica)..."
  },
  "44-what-is-solid": {
    "title": "🧱 O que é SOLID?",
    "description": "SOLID é um acrônimo para cinco princípios da programação orientada a objetos que visam a produção de um software sólido (🥸)..."
  },
  "43-trailing-comma-java": {
    "title": "☕️ Vantagens da vírgula no fim de expressões multilinha",
    "description": "Neste texto, pretendo apresentar os motivos pelos quais a vírgula ao final de expressões multilinha é mais do que apenas uma convenção de estilo..."
  },
  "42-testcontainers": {
    "title": "🪢 O que é Testcontainers?",
    "description": "Testcontainers é uma biblioteca de código aberto, que disponibiliza instâncias de qualquer aplicação que possa ser executada em um container..."
  },
  "41-quicksort": {
    "title": "⛵️ Algoritmos: Quicksort",
    "description": "O Quicksort é um eficiente algoritmo de ordenação, baseia-se em dividir o problema em partes menores, para resolver esta tarefa..."
  },
  "40-aggregation-and-composition": {
    "title": "☕️ Agregação e Composição",
    "description": "Agregação e composição são dois tipos de relacionamento da programação orientada a objetos (POO). Ambos representam associações de propriedade entre objetos, porém..."
  },
  "39-java-encapsulation": {
    "title": "🎯 Java: Encapsulamento",
    "description": "Encapsulamento é um dos pilares da Programação Orientada a Objetos (POO). Refere-se à ação de agrupar dados (atributos) e comportamentos (métodos) em uma única unidade, denominada objeto..."
  },
  "38-interpreter-design-pattern": {
    "title": "🤹 Design Patterns em 1 minuto: Interpreter #23",
    "description": "O padrão de projeto Interpreter provê uma forma dinâmica e clara de transformar em ações determinadas linguagens ou expressões..."
  },
  "37-mediator-design-pattern": {
    "title": "🚦 Design Patterns em 1 minuto: Mediator #22",
    "description": "O Mediator é um padrão de projeto que ajuda a reduzir a complexidade entre a comunicação de múltiplos objetos..."
  },
  "36-flyweight-design-pattern": {
    "title": "🏗️ Design Patterns em 1 minuto: Flyweight #21",
    "description": "O Design Pattern Flyweight permite otimizar o uso de memória em casos onde nossa aplicação precisa disponibilizar uma grande quantidade de objetos contendo conteúdos semelhantes..."
  },
  "35-factory-method-design-pattern": {
    "title": "🛋️ Design Patterns em 1 minuto: Factory Method #20",
    "description": "O padrão de projeto Factory Method provê um meio de criação de objetos que permite que classes filhas possam definir o tipo do objeto que será criado em um método definido na classe pai..."
  },
  "34-template-method-design-pattern": {
    "title": "🍽️ Design Patterns em 1 minuto: Template Method #19",
    "description": "O Template Method é o padrão de projeto que propõe que subclasses possam sobrescrever etapas de um comportamento da superclasse de forma estruturada e adaptável..."
  },
  "33-bridge-design-pattern": {
    "title": "🌉 Design Patterns em 1 minuto: Bridge #18",
    "description": "O padrão de projeto Bridge propõe a separação das responsabilidades de uma classe em duas camadas: abstração e implementação..."
  },
  "32-iterator-design-pattern": {
    "title": "🔄 Design Patterns em 1 minuto: Iterator #17",
    "description": "O padrão de projeto Iterator permite percorrer uma coleção de elementos sem precisar expor sua implementação..."
  },
  "31-visitor-design-pattern": {
    "title": "🚶 Design Patterns em 1 minuto: Visitor #16",
    "description": "O Design Pattern Visitor permite separar o comportamento do objeto em que é executado, aumentando assim a modularidade e adaptabilidade da sua aplicação..."
  },
  "30-composite-design-pattern": {
    "title": "🌳 Design Patterns em 1 minuto: Composite #15",
    "description": "O padrão de projeto Composite propõe que conjuntos de objetos sejam compostos em estruturas de árvore e que cada objeto agrupador delegue o comportamento para seus nós..."
  },
  "29-abstract-factory-design-pattern": {
    "title": "🏭 Design Patterns em 1 minuto: Abstract Factory #14",
    "description": "O Abstract Factory é um padrão de projeto que permite desacoplar a criação de famílias de objetos relacionados e/ou dependentes sem especificar suas classes concretas..."
  },
  "28-memento-design-pattern": {
    "title": "📃 Design Patterns em 1 minuto: Memento #13",
    "description": "O padrão de projeto Memento permite que você restaure estados passados do seu objeto de forma prática sem revelar sua estrutura interna..."
  },
  "27-proxy-design-pattern": {
    "title": "🎩 Design Patterns em 1 minuto: Proxy #12",
    "description": "O Design Pattern Proxy provê uma camada de controle de acesso a um objeto. Essa camada pode ser utilizada para evitar..."
  },
  "26-state-design-pattern": {
    "title": "🧑‍🔬 Design Patterns em 1 minuto: State #11",
    "description": "O padrão de projeto State permite que seu objeto mude os comportamentos quando altera seu estado interno..."
  },
  "25-strategy-design-pattern": {
    "title": "🛣️ Design Patterns em 1 minuto: Strategy #10",
    "description": "O padrão de projeto Strategy permite definir o comportamento de um algoritmo durante a execução da aplicação..."
  },
  "24-facade-design-pattern": {
    "title": "🏛️ Design Patterns em 1 minuto: Facade #9",
    "description": "O padrão de projeto Facade provê uma interface de uso simplificada para uma biblioteca, framework ou qualquer outro conjunto complexo de classes..."
  },
  "23-prototype-design-pattern": {
    "title": "🤖 Design Patterns em 1 minuto: Prototype / Clone #8",
    "description": "Prototype (também conhecido por Clone) é o padrão de projeto que permite a clonagem de um objeto..."
  },
  "22-command-design-pattern": {
    "title": "📮 Design Patterns em 1 minuto: Command #7",
    "description": "O padrão de projeto Command possibilita que você agrupe todos os dados de sua requisição em um único objeto..."
  },
  "21-decorator-design-pattern": {
    "title": "🪆 Design Patterns em 1 minuto: Decorator #6",
    "description": "O Design Pattern Decorator permite customizar os comportamentos de seus objetos sem sobrescrevê-los..."
  },
  "20-chain-of-responsibility-design-pattern": {
    "title": "🔗 Design Patterns em 1 minuto: Chain of Responsibility #5",
    "description": "O Chain of Responsibility é um padrão de projeto que permite desacoplar o controle do fluxo de código repassando a responsabilidade para uma cadeia que..."
  },
  "19-singleton-design-pattern": {
    "title": "🔮 Design Patterns em 1 minuto: Singleton #4",
    "description": "O Design Pattern Singleton garante que uma classe possua uma única (single) instância compartilhada por toda a aplicação..."
  },
  "18-adapter-design-pattern": {
    "title": "🧬 Design Patterns em 1 minuto: Adapter #3",
    "description": "O Adapter é um Design Pattern que permite que interfaces incompatíveis trabalhem juntas adequadamente..."
  },
  "17-observer-design-pattern": {
    "title": "👀 Design Patterns em 1 minuto: Observer #2",
    "description": "O Design Pattern Observer permite criar um mecanismo — pub/sub — de processamento orientado a eventos..."
  },
  "16-builder-design-pattern": {
    "title": "👷 Design Patterns em 1 minuto: Builder #1",
    "description": "Builder é o padrão de projeto que tem como objetivo principal permitir a criação de objetos complexos de maneira simplificada e estruturada..."
  },
  "15-design-patterns": {
    "title": "🥷 Design Patterns em 1 minuto",
    "description": "Os padrões de projeto são uma forma padronizada de solucionar um problema comum existente no desenvolvimento de software..."
  },
  "14-distributed-tracing": {
    "title": "🧶 Coisas que você deveria saber sobre sistemas distribuídos: Distributed Tracing",
    "description": "Distributed Tracing, em tradução livre rastreamento distribuído, é um padrão arquitetural de microserviços utilizado para facilitar e otimizar a observabilidade em sistemas distribuídos."
  },
  "13-how-spring-provides-di": {
    "title": "🍃 Como o Spring provê a injeção de dependências?",
    "description": "Que a injeção \"automágica\" de dependências do Spring proporciona agilidade e simplicidade na escrita de aplicações todos nós já sabemos, mas você sabe como o Spring gerencia e provê essa funcionalidade para nós desenvolvedores?"
  },
  "12-inversion-of-control": {
    "title": "🕺 O que é IoC?",
    "description": "IoC, acrônimo de Inversion of Control (Inversão de Controle), é um princípio da engenharia de software que incentiva a inversão do controle do fluxo da aplicação, mas o que significa isso?"
  },
  "11-queues-and-stacks": {
    "title": "🦉 Filas e pilhas",
    "description": "Filas e pilhas são estruturas de dados muito utilizadas quando precisamos encadear elementos em uma coleção, são muito semelhantes a filas encadeadas, porém, mais restritas e específicas para seus casos de uso, vamos entender…"
  },
  "10-arrays-and-linked-lists": {
    "title": "☀️ Arrays e listas encadeadas",
    "description": "Arrays e listas encadeadas (linked lists) são estruturas de dados que armazenam coleções de elementos, mas fazem isso de diferentes formas, com suas respectivas vantagens e desvantagens."
  },
  "9-ideas-to-practice-programming": {
    "title": "💡 6 ideias para praticar programação",
    "description": "Escrito por um programador e para programadores ou interessados, este texto oferece formas e estratégias para pôr em prática a escrita de código, desde desafios de codificação até projetos colaborativos."
  },
  "8-git-commands": {
    "title": "😸 Git: Comandos chave para devs",
    "description": "Para desenvolvedores modernos, o Git é uma ferramenta indispensável. Dominar seus comandos é essencial para otimizar o fluxo de trabalho. Esta leitura contém algum dos comandos que mais utilizo durante meu fluxo de desenvolvimento."
  },
  "7-avoid-exceptions": {
    "title": "🚫 PARE de usar exceções para controle de fluxo",
    "description": "As exceções podem estar causando impacto de performance desnecessário na sua aplicação — se você as utiliza para controle de fluxo. Entenda..."
  },
  "6-code-review": {
    "title": "🤝 Revisão de código: criando um ambiente de colaboração e aprendizado contínuo",
    "description": "A revisão de código é uma parte crucial do processo de desenvolvimento de software, é o momento onde desenvolvedores examinam o código fonte de outros desenvolvedores com objetivo de prover sugestões sobre as alterações analisadas e..."
  },
  "5-hello-world": {
    "title": "👋 Olá, eu sou o Flôr",
    "description": "Este é o lugar em que escrevo o que gostaria de ler, falo sobre o que estou estudando e publico devaneios sobre sistemas que você utiliza todos os dias."
  },
  "4-what-is-hateoas": {
    "title": "🥏 O que é HATEOAS e qual sua relação com REST?",
    "description": "Falamos recentemente sobre REST, o que é e quais suas principais características, porém, um tema ficou em aberto para conversarmos, e chegou o momento de fazer isto, vamos falar sobre o que é HATEOAS…"
  },
  "3-cap-theorem": {
    "title": "🌀 Coisas que você deveria saber sobre sistemas distribuídos: Teorema CAP",
    "description": "O teorema CAP, também conhecido como teorema de Brewer, é um dos princípios fundamentais dos sistemas distribuídos. A premissa do teorema é que nenhum sistema com distribuição de dados pela rede…"
  },
  "2-what-is-json": {
    "title": "O que é JSON? 🏒",
    "description": "O acrônimo JSON vem de JavaScript Object Notation, é um formato leve de gravar e transportar dados, é utilizado comumente na comunicação entre aplicações cliente-servidor, é \"auto descritivo\" e fácil de entender."
  },
  "1-what-is-rest": {
    "title": "O que é REST? 😴",
    "description": "Se você pensou em descanso, lamento ter que informar, porém não será o tema do artigo de hoje, na verdade vamos falar sobre um estilo de arquitetura de software, em algumas literaturas também chamado…"
  }
}